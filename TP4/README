Trabalho Prático 4 - Implementação de um analisador semântico
Lucas Augusto Freire de Oliveira
2014106422

O código recebe uma AST de um programa e:

- Verifica a integridade da hierarquia de classes
- Verifica a corretude semântica da árvore
- Anota os tipos das expressões na árvore

Para isso, primeiramente montamos o grafo de herança das classes e verificamos
que ele não possui ciclos. Em seguida definimos em cada nó da árvore um método
semant, que faz a verificação e a anotação de tipos. Abaixo explicamos o que
cada arquivo contém:

* cool-tree.h
- Contém a definição da classe ClassTable, que armazena as classes criadas no
programa. Contém também a assinatura de alguns contrutores de listas que são
usados no código. Em seguida, contém a definição de cada tree_node existente,
modificada para permitir a leitura e alteração dos valores necessários para a
análise semântica. Além disso, em cada tree_node é incluída a assinatura do
método semant, que faz a análise semântica de cada elemento.

* semant.h
- Não é usado nessa implementação

* semant.cc
- Nesse arquivo, definimos o construtor da ClassTable, que faz toda a análise
do grafo de herança e armazena as classes. Definimos também para cada tree_node
a função semant. As funções semant realizam toda a análise de escopo, tipos,
etc. Ao fim do código, temos a função semant de program_class. Essa função cria
a ClassTable e em seguida chama a função da ClassTable que chama semant em cada
classe existente. Se houver um erro na parte de verificação da hierarquia de
classes ou na análise semântica do código, essa função exibe uma mensagem de
erro e finaliza sua execução.


Testes:

* good.cl

- Testa as construções semânticas que funcionam corretamente. Nesse arquivo são
definidas as classes B e C, onde B herda de C. B redefine a função init, originalmente
definida em C. Dentro da função init de C são feitos testes de construções condicionais,
de loop, let, atribuições e expressões aritméticas. Esse código printa os valores de 0
até o valor dado para o parâmetro x da função. A função init de B apenas printa "init B"
e retorna um novo valor do tipo B (que é compatível com o retorno da função).
A classe main testa várias chamadas do método init (em C, em B, e em B com chamada estática
a partir de C). Por fim printamos mais alguns valores e testamos o case.


* bad.cl

- Esse arquivo testa as construções semânticas inválidas, garantindo que o compilador
captura todos os erros. Primeiro definimos uma classe C que herda de B. Na função init
de C, tentamos fazer duas atribuições com tipos incompatíveis. Definimos a classe B,
que herda de C. Essa parte que herda de C, porém, está comentada, para que possamos ver
os outros erros (quando o grafo de herança é mal-formado, a compilação não continua).
No método main da classe Main, testamos uma adição com tipos inválidos, chamamos a função
init com argumentos de tipos inválidos, número errado de argumentos, e erros de digitação
na chamada do método. Tentamos uma comparação inválida entre tipos básicos de dados. Essa
comparação é a última expressão da função, portanto o retorno da função está incorreto
(o valor de retorno declarado é C, e o valor da expressão é Bool).
